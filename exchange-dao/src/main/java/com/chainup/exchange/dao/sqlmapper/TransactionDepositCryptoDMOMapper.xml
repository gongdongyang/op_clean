<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chainup.exchange.dao.TransactionDepositCryptoDMOMapper" >
  <resultMap id="BaseResultMap" type="com.chainup.common.stats.entity.TransactionDepositCryptoDMO" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="uid" property="uid" jdbcType="INTEGER" />
    <result column="symbol" property="symbol" jdbcType="VARCHAR" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="fee" property="fee" jdbcType="DECIMAL" />
    <result column="real_fee" property="realFee" jdbcType="DECIMAL" />
    <result column="created_at" property="createdAt" jdbcType="TIMESTAMP" />
    <result column="updated_at" property="updatedAt" jdbcType="TIMESTAMP" />
    <result column="address_to" property="addressTo" jdbcType="VARCHAR" />
    <result column="txid" property="txid" jdbcType="VARCHAR" />
    <result column="confirmations" property="confirmations" jdbcType="INTEGER" />
    <result column="is_mining" property="isMining" jdbcType="TINYINT" />
    <result column="status" property="status" jdbcType="TINYINT" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, uid, symbol, amount, fee, real_fee, created_at, updated_at, address_to, txid, 
    confirmations, is_mining, status
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMOExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transaction_deposit_crypto
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from transaction_deposit_crypto
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from transaction_deposit_crypto
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMOExample" >
    delete from transaction_deposit_crypto
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into transaction_deposit_crypto (uid, symbol, amount, 
      fee, real_fee, created_at, 
      updated_at, address_to, txid, 
      confirmations, is_mining, status
      )
    values (#{uid,jdbcType=INTEGER}, #{symbol,jdbcType=VARCHAR}, #{amount,jdbcType=DECIMAL}, 
      #{fee,jdbcType=DECIMAL}, #{realFee,jdbcType=DECIMAL}, #{createdAt,jdbcType=TIMESTAMP}, 
      #{updatedAt,jdbcType=TIMESTAMP}, #{addressTo,jdbcType=VARCHAR}, #{txid,jdbcType=VARCHAR}, 
      #{confirmations,jdbcType=INTEGER}, #{isMining,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into transaction_deposit_crypto
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        uid,
      </if>
      <if test="symbol != null" >
        symbol,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="fee != null" >
        fee,
      </if>
      <if test="realFee != null" >
        real_fee,
      </if>
      <if test="createdAt != null" >
        created_at,
      </if>
      <if test="updatedAt != null" >
        updated_at,
      </if>
      <if test="addressTo != null" >
        address_to,
      </if>
      <if test="txid != null" >
        txid,
      </if>
      <if test="confirmations != null" >
        confirmations,
      </if>
      <if test="isMining != null" >
        is_mining,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="uid != null" >
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="symbol != null" >
        #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null" >
        #{fee,jdbcType=DECIMAL},
      </if>
      <if test="realFee != null" >
        #{realFee,jdbcType=DECIMAL},
      </if>
      <if test="createdAt != null" >
        #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="addressTo != null" >
        #{addressTo,jdbcType=VARCHAR},
      </if>
      <if test="txid != null" >
        #{txid,jdbcType=VARCHAR},
      </if>
      <if test="confirmations != null" >
        #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="isMining != null" >
        #{isMining,jdbcType=TINYINT},
      </if>
      <if test="status != null" >
        #{status,jdbcType=TINYINT},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMOExample" resultType="java.lang.Integer" >
    select count(*) from transaction_deposit_crypto
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update transaction_deposit_crypto
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null" >
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.symbol != null" >
        symbol = #{record.symbol,jdbcType=VARCHAR},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.fee != null" >
        fee = #{record.fee,jdbcType=DECIMAL},
      </if>
      <if test="record.realFee != null" >
        real_fee = #{record.realFee,jdbcType=DECIMAL},
      </if>
      <if test="record.createdAt != null" >
        created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updatedAt != null" >
        updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="record.addressTo != null" >
        address_to = #{record.addressTo,jdbcType=VARCHAR},
      </if>
      <if test="record.txid != null" >
        txid = #{record.txid,jdbcType=VARCHAR},
      </if>
      <if test="record.confirmations != null" >
        confirmations = #{record.confirmations,jdbcType=INTEGER},
      </if>
      <if test="record.isMining != null" >
        is_mining = #{record.isMining,jdbcType=TINYINT},
      </if>
      <if test="record.status != null" >
        status = #{record.status,jdbcType=TINYINT},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update transaction_deposit_crypto
    set id = #{record.id,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      symbol = #{record.symbol,jdbcType=VARCHAR},
      amount = #{record.amount,jdbcType=DECIMAL},
      fee = #{record.fee,jdbcType=DECIMAL},
      real_fee = #{record.realFee,jdbcType=DECIMAL},
      created_at = #{record.createdAt,jdbcType=TIMESTAMP},
      updated_at = #{record.updatedAt,jdbcType=TIMESTAMP},
      address_to = #{record.addressTo,jdbcType=VARCHAR},
      txid = #{record.txid,jdbcType=VARCHAR},
      confirmations = #{record.confirmations,jdbcType=INTEGER},
      is_mining = #{record.isMining,jdbcType=TINYINT},
      status = #{record.status,jdbcType=TINYINT}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO" >
    update transaction_deposit_crypto
    <set >
      <if test="uid != null" >
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="symbol != null" >
        symbol = #{symbol,jdbcType=VARCHAR},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="fee != null" >
        fee = #{fee,jdbcType=DECIMAL},
      </if>
      <if test="realFee != null" >
        real_fee = #{realFee,jdbcType=DECIMAL},
      </if>
      <if test="createdAt != null" >
        created_at = #{createdAt,jdbcType=TIMESTAMP},
      </if>
      <if test="updatedAt != null" >
        updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      </if>
      <if test="addressTo != null" >
        address_to = #{addressTo,jdbcType=VARCHAR},
      </if>
      <if test="txid != null" >
        txid = #{txid,jdbcType=VARCHAR},
      </if>
      <if test="confirmations != null" >
        confirmations = #{confirmations,jdbcType=INTEGER},
      </if>
      <if test="isMining != null" >
        is_mining = #{isMining,jdbcType=TINYINT},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=TINYINT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO" >
    update transaction_deposit_crypto
    set uid = #{uid,jdbcType=INTEGER},
      symbol = #{symbol,jdbcType=VARCHAR},
      amount = #{amount,jdbcType=DECIMAL},
      fee = #{fee,jdbcType=DECIMAL},
      real_fee = #{realFee,jdbcType=DECIMAL},
      created_at = #{createdAt,jdbcType=TIMESTAMP},
      updated_at = #{updatedAt,jdbcType=TIMESTAMP},
      address_to = #{addressTo,jdbcType=VARCHAR},
      txid = #{txid,jdbcType=VARCHAR},
      confirmations = #{confirmations,jdbcType=INTEGER},
      is_mining = #{isMining,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectDeposetStatisticsCount" resultType="java.lang.Integer" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO">
  	select count(1) from (
		select DATE_FORMAT(created_at,'%Y-%m-%d') date,count(1) count
		from transaction_deposit_crypto 
	    <if test="_parameter != null" >
	      <include refid="Example_Where_Clause" />
	    </if>
		group by date 
  	) temp
  </select>
  <select id="selectDeposetStatistics" resultType="java.util.Map" parameterType="com.chainup.common.stats.entity.TransactionDepositCryptoDMO">
	select DATE_FORMAT(created_at,'%Y-%m-%d') date,sum(amount) amount, symbol,
	COUNT(1) count,count(status=1 or null) successCount,count(DISTINCT uid) userNum
	from transaction_deposit_crypto 
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
	group by date
	order by date desc
	<if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectSettleAmountByDate" resultType="java.util.Map" parameterType="java.util.Map">
	select DATE_FORMAT(created_at,'%Y-%m-%d') date,sum(amount) settledAmount
	from transaction_deposit_crypto 
    where status = 1  and symbol=#{symbol} and DATE_FORMAT(created_at,'%Y-%m-%d') in
    <foreach collection="list" item="listItem" open="(" close=")" separator="," >
     #{listItem}
   </foreach>
	group by date
  </select>
  <select id="selectMaxAmountUserIdByDate" resultType="java.lang.Integer" parameterType="java.util.Map">
    select uid 
	from transaction_deposit_crypto
	where DATE_FORMAT(created_at,'%Y-%m-%d') = #{date} and symbol=#{symbol}
	group by uid order by sum(amount)  desc limit 1
  </select>
</mapper>