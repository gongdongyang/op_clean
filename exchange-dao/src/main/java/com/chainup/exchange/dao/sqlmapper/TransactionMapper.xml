<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.chainup.exchange.dao.TransactionMapper" >
  <resultMap id="BaseResultMap" type="com.chainup.common.exchange.entity.Transaction" >
    <id column="id" property="id" jdbcType="BIGINT" />
    <result column="from_uid" property="fromUid" jdbcType="INTEGER" />
    <result column="from_type" property="fromType" jdbcType="INTEGER" />
    <result column="from_balance" property="fromBalance" jdbcType="DECIMAL" />
    <result column="to_uid" property="toUid" jdbcType="INTEGER" />
    <result column="to_type" property="toType" jdbcType="INTEGER" />
    <result column="to_balance" property="toBalance" jdbcType="DECIMAL" />
    <result column="amount" property="amount" jdbcType="DECIMAL" />
    <result column="meta" property="meta" jdbcType="VARCHAR" />
    <result column="scene" property="scene" jdbcType="VARCHAR" />
    <result column="ref_type" property="refType" jdbcType="VARCHAR" />
    <result column="ref_id" property="refId" jdbcType="BIGINT" />
    <result column="op_uid" property="opUid" jdbcType="INTEGER" />
    <result column="op_ip" property="opIp" jdbcType="VARCHAR" />
    <result column="ctime" property="ctime" jdbcType="TIMESTAMP" />
    <result column="mtime" property="mtime" jdbcType="TIMESTAMP" />
  </resultMap>
  <!--对账查询结果-->
  <resultMap id="BillingCheckResultMap" type="java.util.Map" >
    <result column="depositSum" property="depositSum" jdbcType="DECIMAL" />
    <result column="withdrawSum" property="withdrawSum" jdbcType="DECIMAL" />
    <result column="buySum" property="buySum" jdbcType="DECIMAL" />
    <result column="buyFeeSum" property="buyFeeSum" jdbcType="DECIMAL" />
    <result column="sellSum" property="sellSum" jdbcType="DECIMAL" />
    <result column="opInSum" property="opInSum" jdbcType="DECIMAL" />
    <result column="opOutSum" property="opOutSum" jdbcType="DECIMAL" />
    <result column="presentSum" property="presentSum" jdbcType="DECIMAL" />
  </resultMap>
  <!--公司报表交易统计结果-->
  <resultMap id="TransactionSumResultMap" type="java.util.Map" >
    <result column="tradeFeeSum" property="tradeFeeSum" jdbcType="DECIMAL" />
    <result column="withdrawFeeSum" property="withdrawFeeSum" jdbcType="DECIMAL" />
    <result column="expendWithdrawFeeSum" property="expendWithdrawFeeSum" jdbcType="DECIMAL" />
    <result column="depositSum" property="depositSum" jdbcType="DECIMAL" />
    <result column="withdrawSum" property="withdrawSum" jdbcType="DECIMAL" />
    <result column="userTradeSum" property="userTradeSum" jdbcType="DECIMAL" />
    <result column="presentCoinSum" property="presentCoinSum" jdbcType="DECIMAL" />
  </resultMap>
  <sql id="Example_Where_Clause" >
    <where >
      <foreach collection="oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause" >
    <where >
      <foreach collection="example.oredCriteria" item="criteria" separator="or" >
        <if test="criteria.valid" >
          <trim prefix="(" suffix=")" prefixOverrides="and" >
            <foreach collection="criteria.criteria" item="criterion" >
              <choose >
                <when test="criterion.noValue" >
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue" >
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue" >
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue" >
                  and ${criterion.condition}
                  <foreach collection="criterion.value" item="listItem" open="(" close=")" separator="," >
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List" >
    id, from_uid, from_type, from_balance, to_uid, to_type, to_balance, amount, meta, 
    scene, ref_type, ref_id, op_uid, op_ip, ctime, mtime
  </sql>
  <select id="selectByExample" resultMap="BaseResultMap" parameterType="com.chainup.common.exchange.entity.TransactionExample" >
    select
    <if test="distinct" >
      distinct
    </if>
    <include refid="Base_Column_List" />
    from transaction
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null" >
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0" >
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Long" >
    select 
    <include refid="Base_Column_List" />
    from transaction
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long" >
    delete from transaction
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.chainup.common.exchange.entity.TransactionExample" >
    delete from transaction
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.chainup.common.exchange.entity.Transaction" >
    insert into transaction (id, from_uid, from_type, 
      from_balance, to_uid, to_type, 
      to_balance, amount, meta, 
      scene, ref_type, ref_id, 
      op_uid, op_ip, ctime, 
      mtime)
    values (#{id,jdbcType=BIGINT}, #{fromUid,jdbcType=INTEGER}, #{fromType,jdbcType=INTEGER}, 
      #{fromBalance,jdbcType=DECIMAL}, #{toUid,jdbcType=INTEGER}, #{toType,jdbcType=INTEGER}, 
      #{toBalance,jdbcType=DECIMAL}, #{amount,jdbcType=DECIMAL}, #{meta,jdbcType=VARCHAR}, 
      #{scene,jdbcType=VARCHAR}, #{refType,jdbcType=VARCHAR}, #{refId,jdbcType=BIGINT}, 
      #{opUid,jdbcType=INTEGER}, #{opIp,jdbcType=VARCHAR}, #{ctime,jdbcType=TIMESTAMP}, 
      #{mtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective"  useGeneratedKeys="true" keyProperty="id" parameterType="com.chainup.common.exchange.entity.Transaction" >
    insert into transaction
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="fromUid != null" >
        from_uid,
      </if>
      <if test="fromType != null" >
        from_type,
      </if>
      <if test="fromBalance != null" >
        from_balance,
      </if>
      <if test="toUid != null" >
        to_uid,
      </if>
      <if test="toType != null" >
        to_type,
      </if>
      <if test="toBalance != null" >
        to_balance,
      </if>
      <if test="amount != null" >
        amount,
      </if>
      <if test="meta != null" >
        meta,
      </if>
      <if test="scene != null" >
        scene,
      </if>
      <if test="refType != null" >
        ref_type,
      </if>
      <if test="refId != null" >
        ref_id,
      </if>
      <if test="opUid != null" >
        op_uid,
      </if>
      <if test="opIp != null" >
        op_ip,
      </if>
      <if test="ctime != null" >
        ctime,
      </if>
      <if test="mtime != null" >
        mtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=BIGINT},
      </if>
      <if test="fromUid != null" >
        #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="fromType != null" >
        #{fromType,jdbcType=INTEGER},
      </if>
      <if test="fromBalance != null" >
        #{fromBalance,jdbcType=DECIMAL},
      </if>
      <if test="toUid != null" >
        #{toUid,jdbcType=INTEGER},
      </if>
      <if test="toType != null" >
        #{toType,jdbcType=INTEGER},
      </if>
      <if test="toBalance != null" >
        #{toBalance,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        #{amount,jdbcType=DECIMAL},
      </if>
      <if test="meta != null" >
        #{meta,jdbcType=VARCHAR},
      </if>
      <if test="scene != null" >
        #{scene,jdbcType=VARCHAR},
      </if>
      <if test="refType != null" >
        #{refType,jdbcType=VARCHAR},
      </if>
      <if test="refId != null" >
        #{refId,jdbcType=BIGINT},
      </if>
      <if test="opUid != null" >
        #{opUid,jdbcType=INTEGER},
      </if>
      <if test="opIp != null" >
        #{opIp,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null" >
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null" >
        #{mtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.chainup.common.exchange.entity.TransactionExample" resultType="java.lang.Integer" >
    select count(*) from transaction
    <if test="_parameter != null" >
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map" >
    update transaction
    <set >
      <if test="record.id != null" >
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.fromUid != null" >
        from_uid = #{record.fromUid,jdbcType=INTEGER},
      </if>
      <if test="record.fromType != null" >
        from_type = #{record.fromType,jdbcType=INTEGER},
      </if>
      <if test="record.fromBalance != null" >
        from_balance = #{record.fromBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.toUid != null" >
        to_uid = #{record.toUid,jdbcType=INTEGER},
      </if>
      <if test="record.toType != null" >
        to_type = #{record.toType,jdbcType=INTEGER},
      </if>
      <if test="record.toBalance != null" >
        to_balance = #{record.toBalance,jdbcType=DECIMAL},
      </if>
      <if test="record.amount != null" >
        amount = #{record.amount,jdbcType=DECIMAL},
      </if>
      <if test="record.meta != null" >
        meta = #{record.meta,jdbcType=VARCHAR},
      </if>
      <if test="record.scene != null" >
        scene = #{record.scene,jdbcType=VARCHAR},
      </if>
      <if test="record.refType != null" >
        ref_type = #{record.refType,jdbcType=VARCHAR},
      </if>
      <if test="record.refId != null" >
        ref_id = #{record.refId,jdbcType=BIGINT},
      </if>
      <if test="record.opUid != null" >
        op_uid = #{record.opUid,jdbcType=INTEGER},
      </if>
      <if test="record.opIp != null" >
        op_ip = #{record.opIp,jdbcType=VARCHAR},
      </if>
      <if test="record.ctime != null" >
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mtime != null" >
        mtime = #{record.mtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map" >
    update transaction
    set id = #{record.id,jdbcType=BIGINT},
      from_uid = #{record.fromUid,jdbcType=INTEGER},
      from_type = #{record.fromType,jdbcType=INTEGER},
      from_balance = #{record.fromBalance,jdbcType=DECIMAL},
      to_uid = #{record.toUid,jdbcType=INTEGER},
      to_type = #{record.toType,jdbcType=INTEGER},
      to_balance = #{record.toBalance,jdbcType=DECIMAL},
      amount = #{record.amount,jdbcType=DECIMAL},
      meta = #{record.meta,jdbcType=VARCHAR},
      scene = #{record.scene,jdbcType=VARCHAR},
      ref_type = #{record.refType,jdbcType=VARCHAR},
      ref_id = #{record.refId,jdbcType=BIGINT},
      op_uid = #{record.opUid,jdbcType=INTEGER},
      op_ip = #{record.opIp,jdbcType=VARCHAR},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      mtime = #{record.mtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null" >
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.chainup.common.exchange.entity.Transaction" >
    update transaction
    <set >
      <if test="fromUid != null" >
        from_uid = #{fromUid,jdbcType=INTEGER},
      </if>
      <if test="fromType != null" >
        from_type = #{fromType,jdbcType=INTEGER},
      </if>
      <if test="fromBalance != null" >
        from_balance = #{fromBalance,jdbcType=DECIMAL},
      </if>
      <if test="toUid != null" >
        to_uid = #{toUid,jdbcType=INTEGER},
      </if>
      <if test="toType != null" >
        to_type = #{toType,jdbcType=INTEGER},
      </if>
      <if test="toBalance != null" >
        to_balance = #{toBalance,jdbcType=DECIMAL},
      </if>
      <if test="amount != null" >
        amount = #{amount,jdbcType=DECIMAL},
      </if>
      <if test="meta != null" >
        meta = #{meta,jdbcType=VARCHAR},
      </if>
      <if test="scene != null" >
        scene = #{scene,jdbcType=VARCHAR},
      </if>
      <if test="refType != null" >
        ref_type = #{refType,jdbcType=VARCHAR},
      </if>
      <if test="refId != null" >
        ref_id = #{refId,jdbcType=BIGINT},
      </if>
      <if test="opUid != null" >
        op_uid = #{opUid,jdbcType=INTEGER},
      </if>
      <if test="opIp != null" >
        op_ip = #{opIp,jdbcType=VARCHAR},
      </if>
      <if test="ctime != null" >
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null" >
        mtime = #{mtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chainup.common.exchange.entity.Transaction" >
    update transaction
    set from_uid = #{fromUid,jdbcType=INTEGER},
      from_type = #{fromType,jdbcType=INTEGER},
      from_balance = #{fromBalance,jdbcType=DECIMAL},
      to_uid = #{toUid,jdbcType=INTEGER},
      to_type = #{toType,jdbcType=INTEGER},
      to_balance = #{toBalance,jdbcType=DECIMAL},
      amount = #{amount,jdbcType=DECIMAL},
      meta = #{meta,jdbcType=VARCHAR},
      scene = #{scene,jdbcType=VARCHAR},
      ref_type = #{refType,jdbcType=VARCHAR},
      ref_id = #{refId,jdbcType=BIGINT},
      op_uid = #{opUid,jdbcType=INTEGER},
      op_ip = #{opIp,jdbcType=VARCHAR},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      mtime = #{mtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>

  <select id="selectBillingCheck" parameterType="java.util.Map" resultMap="BillingCheckResultMap">
    select
    (select sum(amount) from transaction where scene = 'deposit' and from_uid=1 and from_type=#{comCoinDepositType} and to_uid = #{uid} and to_type=#{userCoinNormalType}) as depositSum,
    (select sum(amount) from transaction where scene = 'withdraw_success' and from_uid = #{uid} and from_type=#{userCoinWithdrawType} ) as withdrawSum,
    (select sum(amount) from transaction where  to_uid = #{uid} and to_type=#{userCoinNormalType} and from_uid!=#{uid} and from_type=#{userCoinLockType}) as buySum,
    <if test="coinFeeTypeList != null and coinFeeTypeList.size > 0" >
      (select sum(amount) from transaction where  from_uid = #{uid} and from_type=#{userCoinNormalType} and to_uid=1 and to_type in
      <foreach item="item" index="index" collection="coinFeeTypeList" open="(" separator="," close=")">
        #{item}
      </foreach>
      ) as buyFeeSum,
    </if>
    (select sum(amount) from transaction where  from_uid = #{uid} and from_type=#{userCoinLockType} and to_uid!=#{uid} and to_type=#{userCoinNormalType}) as sellSum,
    <if test="comPresentType != null" >
    (select sum(amount) from transaction where  from_uid = 1 and from_type=#{comPresentType} and to_uid = #{uid} and to_type=#{userCoinNormalType}) as presentSum,
    </if>
    <if test="comCoinOperateType != null" >
      (select sum(amount) from transaction where from_uid=1 and from_type=#{comCoinOperateType} and to_uid = #{uid} and to_type=#{userCoinNormalType}) as opInSum,
      (select sum(amount) from transaction where from_uid=#{uid} and from_type=#{userCoinNormalType} and to_uid=1  and to_type=#{comCoinOperateType}) as opOutSum
    </if>
  </select>

<select id="selectOtcBillingCheck" parameterType="java.util.Map" resultMap="BillingCheckResultMap">
    select
    (select sum(amount) from transaction where scene = 'otc_internal_transfer' and from_uid=#{uid} and from_type=#{userCoinNormalType} and to_uid = #{uid} and to_type=#{userOtcCoinNormalType}) as depositSum,
    (select sum(amount) from transaction where scene = 'otc_internal_transfer' and from_uid=1 and from_type=#{userOtcCoinNormalType} and to_uid = #{uid} and to_type=#{userCoinNormalType}) as withdrawSum,
    (select sum(amount) from transaction where  to_uid = #{uid} and to_type=#{userCoinNormalType} and from_uid!=#{uid} and from_type=#{userOtcCoinLockType}) as buySum,
    (select sum(amount) from transaction where  from_uid = #{uid} and from_type=#{userOtcCoinNormalType} and to_uid=1 and to_type = #{coinOtcFeeType}) as buyFeeSum,
    (select sum(amount) from transaction where  from_uid = #{uid} and from_type=#{userOtcCoinLockType} and to_uid!=#{uid} and to_type=#{userOtcCoinNormalType}) as sellSum,
    (select sum(amount) from transaction where from_uid=1 and from_type=#{comCoinOperateType} and to_uid = #{uid} and to_type=#{userOtcCoinNormalType}) as opInSum,
    (select sum(amount) from transaction where from_uid=#{uid} and from_type=#{userOtcCoinNormalType} and to_uid=1  and to_type=#{comCoinOperateType}) as opOutSum
  </select>

  <select id="selectComTransactionSum" parameterType="java.util.Map" resultMap="TransactionSumResultMap">
    select 0
    <if test="tradeFeeTypeList != null and tradeFeeTypeList.size > 0" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP} and to_uid=1 and to_type in
      <foreach item="item" index="index" collection="tradeFeeTypeList" open="(" separator="," close=")">
        #{item}
      </foreach>
      and from_uid>10000) as tradeFeeSum
    </if>
    <if test="withdrawFeeType != null" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
      and to_uid=1 and to_type=#{withdrawFeeType} and from_uid>10000) as withdrawFeeSum
    </if>
    <if test="expendWithdrawFeeType != null" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
      and from_uid=1 and from_type=#{withdrawFeeType} and to_uid=1 and to_type=#{expendWithdrawFeeType}) as expendWithdrawFeeSum
    </if>
    <if test="presentCoinType != null" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
      and from_uid=1 and from_type=#{presentCoinType} and to_uid=1 and to_type=#{userPresentCoinType}) as presentCoinSum
    </if>
  </select>
  <select id="selectDepositAndWithdrawSum" parameterType="java.util.Map" resultMap="TransactionSumResultMap">
    select 0
    <if test="comDepositType != null" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
      and from_uid=1 and from_type=#{comDepositType} and to_uid>10000) as depositSum
    </if>
    <if test="comWithdrawType != null" >
      , (select sum(amount) from `transaction` where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
      and to_uid=1 and to_type=#{comWithdrawType} and from_uid>10000) as withdrawSum
    </if>
  </select>
  <select id="selectTradeSumByCoin" parameterType="java.util.Map" resultMap="TransactionSumResultMap">
    select 0
    <if test="userNormalType != null and userLockType!=null" >
      ,(
        select sum(amount)
        from `transaction`
        where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
        and from_uid>10000 and from_type=#{userLockType}
        and to_uid>10000 and to_type=#{userNormalType}
        and scene='trade'
      ) as userTradeSum
    </if>
  </select>
  
  <select id="selectTradeSumByCoinV2" parameterType="java.util.Map" resultMap="TransactionSumResultMap">
    select 0
    <if test="userNormalType != null and userLockType!=null" >
      ,(
        select sum(amount)
        from `transaction`
        where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
        and from_uid>10000 and from_type=#{userLockType}
        and to_uid>10000 and to_type=#{userNormalType}
        and scene in ('otc_transfer_sellad' ,'otc_transfer_buyad' )
      ) as userBuySum
      
       ,(
        select sum(amount)
        from `transaction`
        where ctime &gt;= #{beginDate,jdbcType=TIMESTAMP} and ctime &lt; #{endDate,jdbcType=TIMESTAMP}
        and from_uid>10000 and from_type=#{userNormalType}
        and to_uid>10000 and to_type=#{userLockType}
        and scene in ('otc_transfer_sellad' ,'otc_transfer_buyad' )
      ) as userSellSum
    </if>
  </select>
  
    <select id="selectFinanceTransaction" parameterType="java.util.Map" resultMap="BaseResultMap">
  	select <include refid="Base_Column_List" /> from transaction where id = -1
  	
  	<if test="deposit != null">
	  	union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'deposit' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    <if test="present_coin != null">
	  	union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'present_coin' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    <if test="withdraw != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'withdraw' and from_uid = #{uid} 
	  	<if test="type!=null">and from_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
	    
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'withdraw_cnacel' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
  	
  	<if test="present_coin != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'present_coin' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime >= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    
    <!-- <if test="buy != null">
	    union 
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'trade' and to_uid = #{uid}
	    <if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    
    <if test="sell != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'trade' and from_uid = #{uid} 
		<if test="sellTypeList != null">
			and from_type in
			<foreach collection="sellTypeList" item="listItem" open="(" close=")" separator="," >
			   #{listItem}
			</foreach>
		</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if> -->
    
    order by id desc
    <if test="limitStart != null">
	    limit #{limitStart} , #{limitEnd}
    </if>
    
  </select>
  <select id="selectFinanceTransactionCount" parameterType="java.util.Map" resultType="java.lang.Integer">
  	select count(1) from (
	  	select <include refid="Base_Column_List" /> from transaction where id = -1
  	
  	<if test="deposit != null">
	  	union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'deposit' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    
    <if test="present_coin != null">
	  	union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'present_coin' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
  	
    <if test="withdraw != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'withdraw' and from_uid = #{uid} 
	  	<if test="type!=null">and from_type = #{type}</if>
	    <if test="startTime != null">and ctime >= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
	    
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'withdraw_cnacel' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    
    <if test="present_coin != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'present_coin' and to_uid = #{uid} 
	  	<if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime >= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
  	
    <!-- <if test="buy != null">
	    union 
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'trade' and to_uid = #{uid}
	    <if test="type!=null">and to_type = #{type}</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if>
    
    <if test="sell != null">
	    union
	  	select <include refid="Base_Column_List" /> from transaction where scene = 'trade' and from_uid = #{uid} 
	    <if test="sellTypeList != null">
			and from_type in
			<foreach collection="sellTypeList" item="listItem" open="(" close=")" separator="," >
			   #{listItem}
			</foreach>
		</if>
	    <if test="startTime != null">and ctime &gt;= #{startTime}</if>
	    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  	</if> -->
  	) temp
  	
    
    
  </select>
  <select id="selectComTransactionSumFee" parameterType="java.util.Map" resultType="java.math.BigDecimal">
    select sum(amount) as countFee from transaction where to_uid=1
    <if test="fromUid!=null">and from_uid = #{fromUid}</if>
    <if test="fromType!=null">and from_type = #{fromType}</if>
    <if test="tradeFeeTypeList != null and tradeFeeTypeList.size > 0" >
      and to_type in
      <foreach item="item" index="index" collection="tradeFeeTypeList" open="(" separator="," close=")">
        #{item}
      </foreach>
    </if>
    <if test="startTime != null">and ctime >= #{startTime}</if>
    <if test="endTime != null">and ctime &lt; #{endTime}</if>
  </select>

  <select id="selectByCtime" resultMap="BaseResultMap" parameterType="map">
    select
    <include refid="Base_Column_List" />
    from transaction
    <where>
      <if test="dateStart != null">
        ctime >= #{dateStart}
      </if>
      <if test="dateEnd != null">
        and ctime &lt; #{dateEnd}
      </if>
      <if test="scene != null">
        and scene = #{scene}
      </if>
    </where>
    order by ctime desc
    <if test="pageStart != null and pageStart>=0" >
      limit #{pageStart},#{pageCount}
    </if>
  </select>

  <select id="recordCount" resultType="java.lang.Integer" parameterType="map">
    select count(1)
    from transaction
    <where>
      <if test="dateStart != null">
        ctime >= #{dateStart}
      </if>
      <if test="dateEnd != null">
        and ctime &lt; #{dateEnd}
      </if>
      <if test="scene != null">
        and scene = #{scene}
      </if>
    </where>
  </select>
</mapper>