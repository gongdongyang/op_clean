<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.chainup.exchange.dao.CoinBankAccountMapper">
  <resultMap id="BaseResultMap" type="com.chainup.common.exchange.entity.CoinBankAccount">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="coin_bank_id" jdbcType="INTEGER" property="coinBankId" />
    <result column="uid" jdbcType="INTEGER" property="uid" />
    <result column="type" jdbcType="TINYINT" property="type" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="ctime" jdbcType="TIMESTAMP" property="ctime" />
    <result column="mtime" jdbcType="TIMESTAMP" property="mtime" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, coin_bank_id, uid, type, status, ctime, mtime
  </sql>
  <select id="selectByExample" parameterType="com.chainup.common.exchange.entity.CoinBankAccountExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from coin_bank_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from coin_bank_account
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from coin_bank_account
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.chainup.common.exchange.entity.CoinBankAccountExample">
    delete from coin_bank_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.chainup.common.exchange.entity.CoinBankAccount">
    insert into coin_bank_account (id, coin_bank_id, uid, 
      type, status, ctime, 
      mtime)
    values (#{id,jdbcType=INTEGER}, #{coinBankId,jdbcType=INTEGER}, #{uid,jdbcType=INTEGER}, 
      #{type,jdbcType=TINYINT}, #{status,jdbcType=TINYINT}, #{ctime,jdbcType=TIMESTAMP}, 
      #{mtime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="com.chainup.common.exchange.entity.CoinBankAccount">
    insert into coin_bank_account
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="coinBankId != null">
        coin_bank_id,
      </if>
      <if test="uid != null">
        uid,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="ctime != null">
        ctime,
      </if>
      <if test="mtime != null">
        mtime,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="coinBankId != null">
        #{coinBankId,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        #{uid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="ctime != null">
        #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null">
        #{mtime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.chainup.common.exchange.entity.CoinBankAccountExample" resultType="java.lang.Long">
    select count(*) from coin_bank_account
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update coin_bank_account
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.coinBankId != null">
        coin_bank_id = #{record.coinBankId,jdbcType=INTEGER},
      </if>
      <if test="record.uid != null">
        uid = #{record.uid,jdbcType=INTEGER},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=TINYINT},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=TINYINT},
      </if>
      <if test="record.ctime != null">
        ctime = #{record.ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.mtime != null">
        mtime = #{record.mtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update coin_bank_account
    set id = #{record.id,jdbcType=INTEGER},
      coin_bank_id = #{record.coinBankId,jdbcType=INTEGER},
      uid = #{record.uid,jdbcType=INTEGER},
      type = #{record.type,jdbcType=TINYINT},
      status = #{record.status,jdbcType=TINYINT},
      ctime = #{record.ctime,jdbcType=TIMESTAMP},
      mtime = #{record.mtime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.chainup.common.exchange.entity.CoinBankAccount">
    update coin_bank_account
    <set>
      <if test="coinBankId != null">
        coin_bank_id = #{coinBankId,jdbcType=INTEGER},
      </if>
      <if test="uid != null">
        uid = #{uid,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=TINYINT},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=TINYINT},
      </if>
      <if test="ctime != null">
        ctime = #{ctime,jdbcType=TIMESTAMP},
      </if>
      <if test="mtime != null">
        mtime = #{mtime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.chainup.common.exchange.entity.CoinBankAccount">
    update coin_bank_account
    set coin_bank_id = #{coinBankId,jdbcType=INTEGER},
      uid = #{uid,jdbcType=INTEGER},
      type = #{type,jdbcType=TINYINT},
      status = #{status,jdbcType=TINYINT},
      ctime = #{ctime,jdbcType=TIMESTAMP},
      mtime = #{mtime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  
   <select id="selectAllAccount" parameterType="java.lang.Integer" resultType="com.chainup.common.exchange.entity.CbIdsDto">
	SELECT ue2.uid,cb.id as coinBankId ,cba.id as coinBankAccountId FROM `coin_bank_account` cba
	INNER JOIN coin_bank cb ON cba.`coin_bank_id` = cb.`id`
	INNER JOIN user_ext ue1 ON cba.`uid` = ue1.`uid`
	INNER JOIN user_ext ue2 ON ue1.`invite_code` = ue2.`invited_code`
	WHERE cb.id = #{bankid} and cba.status = 1

  </select>
  
  
   <select id="countCoinbankDayProfit" parameterType="java.lang.String" resultType="com.chainup.common.exchange.entity.sumDto">
	SELECT SUM(cbu.amount) AS amountSum ,SUM(cbu.fee) AS feeSum ,cb.id as id ,cbu.`coin_name` AS coinName FROM
	`coin_bank_user_profit` cbu
	INNER JOIN `coin_bank_account` cba ON cbu.`coin_bank_account_id` = cba.`id`
	INNER JOIN `coin_bank` cb ON cb.`id` = cba.`coin_bank_id` WHERE
	cba.`status` = 1 AND cb.`status` =1
	AND cbu.`account_time` = #{date}
	GROUP BY cb.`id`,cbu.`coin_name`

  </select>
  
  
    <select id="countCoinbankAccountDayProfit" parameterType="java.lang.String" resultType="com.chainup.common.exchange.entity.sumDto">
	SELECT SUM(cbu.amount) AS amountSum ,SUM(cbu.fee) AS feeSum ,cba.id as id,cbu.`coin_name` AS coinName FROM
	`coin_bank_user_profit` cbu
	INNER JOIN `coin_bank_account` cba ON cbu.`coin_bank_account_id` = cba.`id`
	INNER JOIN `coin_bank` cb ON cb.`id` = cba.`coin_bank_id` WHERE
	cba.`status` = 1 AND cb.`status` =1
	AND cbu.`account_time` = #{date}
	GROUP BY cba.`id`,cbu.`coin_name`

  </select>
  
</mapper>